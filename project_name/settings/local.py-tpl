# Copyright 2020 ITCase (info@itcase.pro)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ****************************************************************
# PROJECT

import os  # noqa
PROJECT = os.getenv('PROJECT')

DJANGO_RQ_DISABLE = False

# ****************************************************************
# DJANGO

# CACHES
from .cache import CACHES  # noqa
try:
    from .core import SESSION_CACHE_ALIAS
except ImportError:
    SESSION_CACHE_ALIAS = None
CACHE_MIDDLEWARE_SECONDS = 1
for index, cache in enumerate(CACHES):
    CACHES[cache]['LOCATION'] = f'redis://redis:6379/{index}'

    if cache == SESSION_CACHE_ALIAS:
        continue

    CACHES[cache]['TIMEOUT'] = CACHE_MIDDLEWARE_SECONDS

# DATABASES
from .core import DATABASES  # noqa
DATABASES['default']['HOST'] = 'postgres'
DATABASES['default']['PASSWORD'] = f'{PROJECT}-password'

# DEBUG
# https://docs.djangoproject.com/en/dev/ref/settings/#debug
from .core import TEMPLATES  # noqa
DEBUG = True
TEMPLATES[0]['OPTIONS'].update({'debug': DEBUG})
ALLOWED_HOSTS = ['*']

# EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# INTERNAL IPs hack for run in Docker
import socket, struct  # noqa
INTERNAL_IPS = set()
with open('/proc/net/route') as fh:
    for line in fh:
        fields = line.strip().split()

        try:
            ip = socket.inet_ntoa(struct.pack('<L', int(fields[2], 16)))
        except ValueError:
            continue

        INTERNAL_IPS.add(ip)


# LOGGING
from .logging import LOGGING  # noqa
for logger in ('management', 'rq.worker'):
    if logger not in LOGGING['loggers']:
        continue
    LOGGING['loggers'][logger]['level'] = 'DEBUG'

# STATIC
from .static import STATIC_ROOT, STATICFILES_DIRS  # noqa
STATICFILES_DIRS.append(STATIC_ROOT)
STATIC_ROOT = ''

# ****************************************************************
# THIRD-PARTY

# Django Debug Toolbar
# https://github.com/jazzband/django-debug-toolbar
if False:  # False/True
    from .core import INSTALLED_APPS, MIDDLEWARE  # noqa
    DEBUG_TOOLBAR_PANELS = [
        # 'debug_toolbar.panels.versions.VersionsPanel',
        # 'debug_toolbar.panels.timer.TimerPanel',
        # 'debug_toolbar.panels.settings.SettingsPanel',
        # 'debug_toolbar.panels.headers.HeadersPanel',
        # 'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        # 'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        # 'debug_toolbar.panels.templates.TemplatesPanel',
        # 'debug_toolbar.panels.cache.CachePanel',
        # 'debug_toolbar.panels.signals.SignalsPanel',
        # 'debug_toolbar.panels.logging.LoggingPanel',
        # 'debug_toolbar.panels.redirects.RedirectsPanel',
        # 'debug_toolbar.panels.profiling.ProfilingPanel',
    ]
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    ROOT_URLCONF = 'urls_debug'

# Django Extensions
# https://github.com/django-extensions/django-extensions
from .core import INSTALLED_APPS  # noqa
INSTALLED_APPS.append('django_extensions')
