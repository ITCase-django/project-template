# Copyright 2023 ITCase (info@itcase.pro)

# ****************************************************************
# PROJECT

import os  # noqa
PROJECT = os.getenv('PROJECT')

# ****************************************************************
# DJANGO

# DATABASES
from .core import DATABASES  # noqa
DATABASES['default']['PASSWORD'] = f'{PROJECT}-password'

# DEBUG
# https://docs.djangoproject.com/en/dev/ref/settings/#debug
ALLOWED_HOSTS = ['*']
DEBUG = True
INTERNAL_IPS = ('127.0.0.1', 'localhost')
from .core import TEMPLATES  # noqa
TEMPLATES[0]['OPTIONS'].update({'debug': DEBUG})

# EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# https://docs.djangoproject.com/en/dev/howto/initial-data/#initial-data-via-fixtures
from pathlib import Path  # noqa
fixture_dir = Path(os.getenv('PROJECT_TMP', '')) / 'fixtures'
if fixture_dir.is_dir():
    FIXTURE_DIRS = [fixture_dir]

# LOGGING
from .logging import LOGGING  # noqa
# local
loggers = []
# itcase
#from itcase_plugin.logging import LOGGERS as itcase_plugin_loggers  # noqa
#loggers += list(itcase_plugin_loggers.keys())
#add more verbosity to itcase-plugin loggers
#LOGGING['handlers']['itcase_plugin']['formatter'] = 'verbose'
# third-party
loggers += ['rq.worker']

for logger in loggers:
    if logger not in LOGGING['loggers']:
        continue
    LOGGING['loggers'][logger]['level'] = 'DEBUG'

# STATIC
from .core import STATIC_ROOT, STATICFILES_DIRS  # noqa
STATICFILES_DIRS.append(STATIC_ROOT)
STATIC_ROOT = None

# ****************************************************************
# THIRD-PARTY

# Django CORS Headers
# https://github.com/adamchainz/django-cors-headers
# required for NextJS frontend
try:
    import corsheaders  # noqa
    from .core import INSTALLED_APPS, MIDDLEWARE  # noqa
    INSTALLED_APPS.append('corsheaders')
    MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')
    CORS_ALLOW_ALL_ORIGINS = True
except ImportError:
    pass

# Django Debug Toolbar
# https://github.com/jazzband/django-debug-toolbar
if False:  # False/True
    from .core import INSTALLED_APPS, MIDDLEWARE  # noqa
    DEBUG_TOOLBAR_PANELS = [
        # 'debug_toolbar.panels.versions.VersionsPanel',
        # 'debug_toolbar.panels.timer.TimerPanel',
        # 'debug_toolbar.panels.settings.SettingsPanel',
        # 'debug_toolbar.panels.headers.HeadersPanel',
        # 'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        # 'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        # 'debug_toolbar.panels.templates.TemplatesPanel',
        # 'debug_toolbar.panels.cache.CachePanel',
        # 'debug_toolbar.panels.signals.SignalsPanel',
        # 'debug_toolbar.panels.logging.LoggingPanel',
        # 'debug_toolbar.panels.redirects.RedirectsPanel',
        # 'debug_toolbar.panels.profiling.ProfilingPanel',
    ]
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    ROOT_URLCONF = 'debug_toolbar_urls'

# Django Extensions
# https://github.com/django-extensions/django-extensions
try:
    import django_extensions  # noqa
    from .core import INSTALLED_APPS  # noqa
    INSTALLED_APPS.append('django_extensions')
except ImportError:
    pass

# Django REST Framework
# https://github.com/tomchristie/django-rest-framework
try:
    from .rest_framework import REST_FRAMEWORK
    REST_FRAMEWORK.update({
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
            'rest_framework.renderers.BrowsableAPIRenderer',
        ),
    })
except ImportError:
    pass

# Django RQ
# https://github.com/rq/django-rq
from .rq import RQ_QUEUES  # noqa
# run all queues in synchronous mode
for queueConfig in RQ_QUEUES.values():
    queueConfig['ASYNC'] = False
